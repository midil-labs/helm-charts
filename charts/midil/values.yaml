# Service identification (set by parent app)
serviceName: ""
nameOverride: ""
fullnameOverride: ""
replicaCount: 1
platform: "midil"


image:
  registry: "ghcr.io/midil-labs"
  service: ""
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: ghcr-secret
  # Create a docker-registry Secret for GHCR
  createPullSecret: false
  pullSecretName: ghcr-secret
  dockerServer: ghcr.io
  credentials:
    username: ""
    password: ""
    email: ""


service:
  type: ClusterIP
  http:
    port: 80
    targetPort: 8000


# Traefik IngressRoute (optional)
ingressRoute:
  enabled: true
  host: "onekg.midil.io"
  # Traefik entry points. Defaults to websecure (443). Override to ["web", "websecure"] for local HTTP+HTTPS.
  entryPoints: [websecure, web]
  tls:
    enabled: false
    secretName: "my-tls-secret-name"
  route:
    pathPrefix: "/"
    servicePort: 80
  routes: []

# CORS configuration
cors:
  enabled: true
  environment: "production"
  allowedOrigins: []
  allowedMethods: []
  allowedHeaders: []
  allowCredentials: true
  maxAge: 86400


resources:
  requests:
    cpu: "100m"
    memory: "128Mi"
  limits:
    cpu: "500m"
    memory: "512Mi"


autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 75


probes:
  enabled: true
  liveness:
    path: /health
    port: 8000
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 2
    failureThreshold: 3
  readiness:
    path: /health
    port: 8000
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
  startup:
    path: /health
    port: 8000
    failureThreshold: 30
    periodSeconds: 10

# Monitoring
monitoring:
  enabled: false
  port: 9090
  path: "/metrics"

# Service account and security contexts
serviceAccount:
  create: true
  annotations: {}
  name: ""

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  capabilities:
    drop:
      - ALL

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Affinity and tolerations
nodeSelector: {}
tolerations: []
affinity: {}



midil:
  config:
    enabled: false
    api:
      server:
        port: 8080
    auth:
      type: "cognito"
      user_pool_id: "us-east-1_dnBcODUyQ"   # non-sensitive, so in config
      client_id: "2j97fbdu588je17scvnlm9t4bk"
      region: "us-east-1"
    event:
      consumers: {}
      producers: {}
    logger:
      log_level: "INFO"
      enable_http_logging: true

  secrets:
    enabled: false
    api: {}
    auth:
      client_secret: ""   # if applicable
    event:
      consumers: {}
      producers: {}

# App-specific configs (non-sensitive)
config:
  extraConfig: {}
  # Example:
  #   LOG_LEVEL: "debug"
  #   FEATURE_X_ENABLED: "true"

# App-specific secrets (sensitive values)
secrets:
  extraSecrets: {}
  # Example:
  #   AWS_ACCESS_KEY_ID: "AKIAXXXXX"
  #   AWS_SECRET_ACCESS_KEY: "SECRETXXXX"


extraVolumeMounts: []
extraVolumes: []
